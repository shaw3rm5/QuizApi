// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QuizApi.Infrastructure.Database;

#nullable disable

namespace QuizApi.Infrastructure.Database.Postgres.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QuizApi.Infrastructure.Entities.AnswerOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("option_text");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer")
                        .HasColumnName("order_index");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<Guid>("QuestionId1")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id1");

                    b.HasKey("Id")
                        .HasName("pk_answer_option");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_answer_option_question_id");

                    b.HasIndex("QuestionId1")
                        .HasDatabaseName("ix_answer_option_question_id1");

                    b.ToTable("answer_option", (string)null);
                });

            modelBuilder.Entity("QuizApi.Infrastructure.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_required");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer")
                        .HasColumnName("order_index");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("question_text");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uuid")
                        .HasColumnName("quiz_id");

                    b.Property<int>("TimeLimitSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("time_limit_seconds");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_question");

                    b.HasIndex("QuizId")
                        .HasDatabaseName("ix_question_quiz_id");

                    b.ToTable("question", (string)null);
                });

            modelBuilder.Entity("QuizApi.Infrastructure.Entities.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccessCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("access_code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset>("EndsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ends_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsAnonymousAllowed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_anonymous_allowed");

                    b.Property<DateTimeOffset>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starts_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("visibility");

                    b.HasKey("Id")
                        .HasName("pk_quiz");

                    b.ToTable("quiz", (string)null);
                });

            modelBuilder.Entity("QuizApi.Infrastructure.Entities.QuizAnalytic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("AverageCompletionTime")
                        .HasColumnType("double precision")
                        .HasColumnName("average_completion_time");

                    b.Property<double>("CompletionRate")
                        .HasColumnType("double precision")
                        .HasColumnName("completion_rate");

                    b.Property<DateTimeOffset>("LastCalculatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_calculated_at");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uuid")
                        .HasColumnName("quiz_id");

                    b.Property<int>("TotalResponses")
                        .HasColumnType("integer")
                        .HasColumnName("total_responses");

                    b.HasKey("Id")
                        .HasName("pk_quiz_analytic");

                    b.HasIndex("QuizId")
                        .IsUnique()
                        .HasDatabaseName("ix_quiz_analytic_quiz_id");

                    b.ToTable("quiz_analytic", (string)null);
                });

            modelBuilder.Entity("QuizApi.Infrastructure.Entities.Response", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("IpAddressHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("ip_address_hash");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uuid")
                        .HasColumnName("quiz_id");

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("session_id");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_response");

                    b.HasIndex("QuizId")
                        .HasDatabaseName("ix_response_quiz_id");

                    b.ToTable("response", (string)null);
                });

            modelBuilder.Entity("QuizApi.Infrastructure.Entities.ResponseAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("AnsweredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("answered_at");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<Guid>("QuestionId1")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id1");

                    b.Property<int>("RatingValue")
                        .HasColumnType("integer")
                        .HasColumnName("rating_value");

                    b.Property<Guid>("ResponseId")
                        .HasColumnType("uuid")
                        .HasColumnName("response_id");

                    b.Property<Guid>("ResponseId1")
                        .HasColumnType("uuid")
                        .HasColumnName("response_id1");

                    b.PrimitiveCollection<Guid[]>("SelectedAnswerIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("selected_answer_ids");

                    b.Property<string>("TextAnswer")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("text_answer");

                    b.HasKey("Id")
                        .HasName("pk_response_answer");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_response_answer_question_id");

                    b.HasIndex("QuestionId1")
                        .HasDatabaseName("ix_response_answer_question_id1");

                    b.HasIndex("ResponseId")
                        .HasDatabaseName("ix_response_answer_response_id");

                    b.HasIndex("ResponseId1")
                        .HasDatabaseName("ix_response_answer_response_id1");

                    b.ToTable("response_answer", (string)null);
                });

            modelBuilder.Entity("QuizApi.Infrastructure.Entities.AnswerOption", b =>
                {
                    b.HasOne("QuizApi.Infrastructure.Entities.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_answer_option_question_question_id");

                    b.HasOne("QuizApi.Infrastructure.Entities.Question", "Question")
                        .WithMany("AnswerOptions")
                        .HasForeignKey("QuestionId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_answer_option_question_question_id1");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizApi.Infrastructure.Entities.Question", b =>
                {
                    b.HasOne("QuizApi.Infrastructure.Entities.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_quiz_quiz_id");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizApi.Infrastructure.Entities.QuizAnalytic", b =>
                {
                    b.HasOne("QuizApi.Infrastructure.Entities.Quiz", "Quiz")
                        .WithOne()
                        .HasForeignKey("QuizApi.Infrastructure.Entities.QuizAnalytic", "QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quiz_analytic_quiz_quiz_id");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizApi.Infrastructure.Entities.Response", b =>
                {
                    b.HasOne("QuizApi.Infrastructure.Entities.Quiz", "Quiz")
                        .WithMany("Responses")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_response_quiz_quiz_id");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizApi.Infrastructure.Entities.ResponseAnswer", b =>
                {
                    b.HasOne("QuizApi.Infrastructure.Entities.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_response_answer_question_question_id");

                    b.HasOne("QuizApi.Infrastructure.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_response_answer_question_question_id1");

                    b.HasOne("QuizApi.Infrastructure.Entities.Response", null)
                        .WithMany("Answers")
                        .HasForeignKey("ResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_response_answer_response_response_id");

                    b.HasOne("QuizApi.Infrastructure.Entities.Response", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_response_answer_response_response_id1");

                    b.Navigation("Question");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("QuizApi.Infrastructure.Entities.Question", b =>
                {
                    b.Navigation("AnswerOptions");
                });

            modelBuilder.Entity("QuizApi.Infrastructure.Entities.Quiz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("QuizApi.Infrastructure.Entities.Response", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
